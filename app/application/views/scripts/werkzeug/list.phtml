<?php
$front = Zend_Controller_Front::getInstance();
$request = $front->getRequest();
$modul = $request->getModuleName();
$controller = $request->getControllerName();
$baseUrlSperrzeiten = $this->url(array('module' => 'touren','controller'=>'resourcesSperrzeiten','action'=>'gridlist', 'rsrcType'=>'WZ', 'ajax'=>1), null, FALSE); 
$baseUrlDispozeiten = $this->url(array('module' => 'touren','controller'=>'resourcesDispozeiten','action'=>'gridlist', 'rsrcType'=>'WZ', 'ajax'=>1), null, FALSE); 
?>
<!-- link type="text/css" rel="stylesheet" href="<?php echo APPLICATION_BASE_URL; ?>/jquery/autocomplete_chooser/chooser.css" / -->
<style>
    div.ui-jqgrid,
    #gbox_treeSelectDialog {
        border:2px #d2d2d2 solid;
        padding: 1px;
    }
</style>
<!-- requires /jquery/util/jquery.chooser.js, ist in jquery.util-all.min.js enthalten -->
<script>

    
function showDialogWzSperrzeiten(id) {
    var baseUrl = "<?=$baseUrlSperrzeiten; ?>";
    var url = baseUrl + (baseUrl.indexOf("?") == -1 ? '?' : '&') + "rsrcID="+id;
    $("#DialogSperrzeiten").dialog({autoOpen:true,height:'auto',width:'auto'}).dialog('open').load(url);
    
}

function showDialogFpDispozeiten(id, exclusiv) {
    var title = (exclusiv ? "Disponierbare Zeiten" : "Sperrzeiten");
    var baseUrl = (exclusiv ? "<?=$baseUrlDispozeiten; ?>" : "<?=$baseUrlSperrzeiten; ?>")
    var url = baseUrl + (baseUrl.indexOf("?") == -1 ? '?' : '&') + "rsrcID="+id;
    $("#DialogDispozeiten").dialog({title:title,autoOpen:true,height:'auto',width:'auto'}).dialog('open').load(url);    
}
$(function(){
    var baseUrl = <?php echo json_encode(APPLICATION_BASE_URL . "/$controller/gridresponsedata"); ?>;
    $("#RsrcFilterBtnSet").buttonset();
    $("#RsrcFilterBtnSet").find("#rsrcFilterAll,#rsrcFilterInt,#rsrcFilterExt").click(function(){
       var url = baseUrl+"?extFilter="+$(this).val();
       $("#gridUsrLst").jqGrid('setGridParam',{search:true, url:url} ).trigger("reloadGrid");
    });
});
var CategoryIdCache = [];
var ExternIdCache = {};
</script>
<?php
require_once 'JqGridColModelFormatter.php';

        /* @var $this Zend_View */
        require_once 'JqGridHeader.php';
        JqGridHeader::enable(true);
        
        $GridId = '#gridUsrLst';
        $GridIdPager = '#gridUsrLst_pager';
        $JqGrid = new JqGrid($GridId);
        // Grid-Options definieren
        $JqGrid->height('auto')
        ->jsonReader(array( "repeatitems" => false, "id" => 0 ) )
        ->width(800)
        //->hiddengrid(true)
        ->rowList(array(10, 20, 30, 40, 50,100))
        ->rowNum(100)
        ->rownumbers(true)
        ->resizable(false)
        ->sortable(true)
        ->datatype('json')
        ->url(APPLICATION_BASE_URL . '/werkzeug/gridresponsedata')
        ->editurl(APPLICATION_BASE_URL . '/werkzeug/grideditdata')
        ->setNavGrid($GridIdPager, $properties = array())
        ->caption("Test-Grid")
        ->shrinkToFit(true)
        ->pager($GridIdPager)
//        ->on_cellSelect(new JsFunction('function(){ alert("onCellSelect:"+$.makeArray(arguments))}'))
        ->on_loadError( new JsFunction("function(xhr,status,error){ alert(status+'\\n'+error);}") )
        ->addChainMethod('.jqGrid("filterToolbar",{stringResult: true,searchOnEnter : false})')
//        ->addChainMethod( ".jqGrid('searchGrid', {sopt:['cn','bw','eq','ne','lt','gt','ew']} )")
        ->colNames( array(
            'sperren','dispo',
            'wid',
            'Extern',
			'Menge',
            'Bezeichnung', //'Modell', 'Fzg-Art', 'FKL', 'Erstzulassung', 'Anschaffung', 'NaechsteInspektion', 'Kmst', 'Laderaum-L', 'Laderaum-B', 'Laderaum-H', 'Ladevol', 'Nutzlast', 'KW', 'Sitze', 
            'Qualifikation', //'Modell', 'Fzg-Art', 'FKL', 'Erstzulassung', 'Anschaffung', 'NaechsteInspektion', 'Kmst', 'Laderaum-L', 'Laderaum-B', 'Laderaum-H', 'Ladevol', 'Nutzlast', 'KW', 'Sitze', 
            'Kategorien'
        ))
        ->colModel(array('addFieldsProperties' => array(
                       "sperren" => array('key'=>false, 'editable'=>false, 'sortable'=>false, 'search'=>false, 'formatter' => new JsFunction(
                                'function(cellvalue, options, rowObject) { '
                               .'return "<a href=\'#"+rowObject.wid+"\' onclick=\'showDialogFpDispozeiten("+rowObject.wid+",0);return false;\' >Sperrzeiten</a>"; '
                               .'}'
                               )),
                       "dispo" => array('key'=>false, 'editable'=>false, 'sortable'=>false, 'search'=>false, 'formatter' => new JsFunction(
                                'function(cellvalue, options, rowObject) { '
                               .'return "<a href=\'#"+rowObject.wid+"\' onclick=\'showDialogFpDispozeiten("+rowObject.wid+",1);return false;\' >Dispozeiten</a>"; '
                               .'}'
                               )),
                          "wid" => array('key'=>true),
                     "extern_id" => array('editable'=>true, 'edittype' => 'text'),
                        "menge"  => array('editable'=>true, 'edittype'=>'text', 'editrules'=>array('number'=>true)),
                   "bezeichnung" => array('editable'=>true, 'edittype'=>'text', 'editoptions'=>null),
   "erforderliche_qualifikation" => array('editable'=>true, 'edittype'=>'text'),
                    "categories" => array('editable'=>true, 'edittype'=>'text', 
                                         'sortable'=>false,  
                                         'searchoptions' => array( 
                                             'sopt' => array('eq', 'ne'), 
                                             'dataInit' => new JsFunction('function (el) {                                                
                                                $(el).click(function() {
                                                    var self = this;
                                                    $(this).hide();
                                                    var input = $(this).clone();
                                                    $(this).after( input );
                                                    input.attr("id", $(this).attr("id") + "_clone");
                                                    input.attr("name", $(this).attr("name") + "_clone");
                                                    input.show().attr("readonly",true);
                                                    input.click(function(){
                                                        var id = "CategoryDialog";
                                                        var input = $(this);
                                                        var dialog = $("#"+id);
                                                        if (!dialog.length) {
                                                            dialog = $("<div/>").attr("id", id)
                                                            .appendTo("body")
                                                            .css({position:"absolute", zIndex:999})
                                                            .bind("mouseleave", function() { $(this).hide(); })
                                                            .load("' . APPLICATION_BASE_URL . '/wzcategories/selectdialog?treeID=treeSearchDialogWZ", 
                                                                function() {
                                                                $("#treeSearchDialogWZ").bind("selectTreeNode", function(event, data) {
                                                                    $(self).val( data.id );
                                                                    input.val( data.name );
                                                                    $(self).trigger("change").trigger("keydown");
                                                                    dialog.hide();
                                                                });
                                                            });
                                                        }
                                                        dialog.show().css({left:input.offset()["left"], top: input.offset()["top"] + input.outerHeight() });
                                                    });
                                                    $(input).trigger("click");
                                                });
                                              }') 
                                        ),
                                    ),
        )));
        
        $jqGridMethods = new JqGridMethods();
        $JqGrid->addChainMethod(
            $jqGridMethods->gridResize(array())
        );
        
        $JqGrid->enableInlineEditingDefaults(array('oneditfunc' => new JsFunction('function() {
            // Input für Initialisierung leeren, Daten wurden zuvor von der
            // CustomUnformatter-Funktion in td.dat(inputData) abgelegt
            // von wo sie zur Initialisierung des Chooser-Objekts ausgelesen werden
            var $input = $( "#"+id+"_categories" ).val( "" );
            
            // Chooser registrieren und an Input-Feld binden
            if (0) jqChooser.register( $input, "' . APPLICATION_BASE_URL . '/wzcategories/autocomplete");
            else jqChooser.registerUserBox( $input, "' . APPLICATION_BASE_URL . '/wzcategories/selectdialog", 
                function(searchInput) {            
                    $(searchInput).hide();
                    $("#treeSelectDialog").bind("selectTreeNode", function(event, data) {
                        jqChooser.addValue( searchInput, data.id, data.name );
                        CategoryIdCache[data.id] = data.name;
                    });
            });
            
            // Chooser mit Werten befüllen
            var data = $input.closest( "td" ).data("inputData");
            var chooserSearch = jqChooser.getSearchInputByOriginInput( $input );
            jqChooser.setData( chooserSearch, data );
            // Autocomplete-Chooser: extern_id
            $( "#"+id+"_extern_id" ).fbChooser({
                "showSearchInput": true
                ,"source": "' . APPLICATION_BASE_URL . '/extern/autocomplete?type=WZ"
                ,"multiple": false
                ,"cacheValues" : ExternIdCache
            });
        }')));
        
        /* @var $colModelList JqGridColModelList */
        $colModelList = $JqGrid->colModel();
                
        $colModelList->getItem('categories')->getInstanceFormatterCustom(
            'function( cellvalue, opts, rowObject ) {
                var colIndex = opts.colModel.index,
                    selector = "tr#"+opts.rowId + " td[aria-describedby="+opts.gid+"_"+colIndex+"]",
                    selContext = "#"+opts.gid,
                    $cell = $( selector, selContext ),
                    html = "";
                    
                if ($cell.length ) {
                    var cachedata = CategoryIdCache,
                        values = cellvalue.split(","),
                        label = "";
                    
                    if (cellvalue)
                    for(var i = 0; i < values.length; ++i)  {
                        label =  (typeof(cachedata[ values[i] ] ) !== "undefined") ? cachedata[ values[i] ] : "ERR: ID ";
                        html+= "<span rel-value=\'"+values[i]+"\' rel-label=\'"+label+"\'>"+label+";</span>";
                        continue;
                    }
                } else {
                    if (typeof(cellvalue)=="object") {
                        for(var i in cellvalue) {
                            html+= "<span rel-value=\'"+cellvalue[i].category_id+"\' rel-label=\'"+cellvalue[i].name+"\'>"+cellvalue[i].name+";</span>";
                            CategoryIdCache[ cellvalue[i].category_id ] = cellvalue[i].name;
                        }
                    } else { html = "<span rel-value=\'"+cellvalue+"\' rel-label=\'"+cellvalue+"\' />"+cellvalue+"</span>"; }
                }
                return html;
            }'
        );
        $colModelList->getItem('categories')->getInstanceUnformatCustom(
            'function( cellvalue, options, cell ) {
                var data = [], values = [];
                $("span", cell).each( function(index) {
                    data.push( { value: $( this ).attr("rel-value"), label: $( this ).attr("rel-label")} );
                    values.push( $( this ).attr("rel-value") );
                });
                $( cell ).data("inputData", data );                
                return values.join(",");
            }'
        );
        
        $colModelList->getItem('extern_id')->getInstanceFormatterCustom(
            'function( cellvalue, opts, rowObject ) {
                if (!parseInt(cellvalue) ) return "";
                var cellSelector = "tr#"+opts.rowId + " td[aria-describedby="+opts.gid+"_"+opts.colModel.index+"]";
                var cell = $(cellSelector),
                    html = "";
                
                // Beim ersten Rendering des Feldes vertrauen wir dem rowObjet,
                // auch da ExternIdCache noch nicht befuellt ist
                var lbl = (!cell.length) ? rowObject["extern_firma"]
                          :(( typeof(ExternIdCache[ cellvalue ]) !== "undefined" && ExternIdCache[ cellvalue ] !== null  ) 
                            ? ExternIdCache[ cellvalue ] : cellvalue);
                
                return "<span rel-value=\'"+cellvalue+"\' rel-label=\'"+lbl+"\'>"+lbl+"</span>";                 
            }'
        );
        $colModelList->getItem('extern_id')->getInstanceUnformatCustom(
            'function( cellvalue, options, cell ) {
                var span = $("span", cell);
                if (!span.length) return "";
                var val = span.attr("rel-value");
                alert( "#247 unformatter val: " + val );
                ExternIdCache[ val ] = span.attr("rel-label");
                return val;
            }'
        );
        
        // Make all Fields (also invisible, hidden) searchable!
        /* @var $_cmItem JqGridColModel */
        foreach($colModelList as $_cmItem) {
            /* @var $_itemSearchOpts JqGridColModelSearchOptions */
            $_itemSearchOpts = $_cmItem->getInstanceSearchOptions();
            if ($_itemSearchOpts && method_exists($_itemSearchOpts, 'set_searchhidden') ) {
                $_itemSearchOpts->set_searchhidden(true);
            } else {
//                die('Not a Method!');
            }
        }
        
        $navGrid = $JqGrid->getInstanceNavGrid($GridIdPager);
        $navGrid->set_edit(true);
//        $navGrid->set_addicon('ui-icon-plus');
        $navGrid->set_search(
                new JsFunction(
                         '{'
                        .'multipleSearch:true,'
                        .'overlay:false,'
                        .'beforeShowSearch:function() { '
                        .' $("'.$GridId.'")[0].toggleToolbar(); },'
                        .'onClose:function() {    	$("'.$GridId.'")[0].toggleToolbar();   }'
                        .'}'
                        )
        )
        ->addNavButton(new JqGridNavGridButton(array(
                       'id' => 'btnTbarSearch',
               'buttonicon' => 'ui-icon-pin-s',
                  'caption' => 'ColSearch',
                    'title' => 'Toggle Searching Toolbar',
            'onclickButton' => 'function () { $("'.$GridId.'")[0].toggleToolbar(); }'
        )));
        
        /* @var $searchPrm JqGridNavGridSearchFormOptions */
        $searchPrm = $navGrid->getInstanceSearchFormOptions();
        $searchPrm->set_sopt(array('eq'));
        $searchPrm->set_beforeShowSearch('function() { '.' $("'.$GridId.'")[0].toggleToolbar(); }');
        $searchPrm->set_onClose('function() { $("'.$GridId.'")[0].toggleToolbar();   }');
        $searchPrm->set_multipleSearch(true);
        
        /* @var $editPrm JqGridNavGridEditFormOptions */
        $addPrm = $navGrid->getInstanceAddFormOptions();
        $addPrm->onbeforeShowForm(new JsFunction('function(formid) {
            //alert( "formid: " + formid );
            var $input = $("input#categories", formid);
            var values = $input.val().split(",");
            values.push(1);
            $input.val("");
            jqChooser.registerUserBox( $input, "' . APPLICATION_BASE_URL . '/wzcategories/selectdialog", 
                function(searchInput) {            
                    $(searchInput).hide();
                    $("#treeSelectDialog").bind("selectTreeNode", function(event, data) {
                        jqChooser.addValue( searchInput, data.id, data.name );
                        CategoryIdCache[data.id] = data.name;
                    });
            });
            
            var chooserSearch = jqChooser.getSearchInputByOriginInput( $input );
            for(var i = 0; i < values.length; ++i) {
                if (values[i]) jqChooser.addValue(chooserSearch, values[i], CategoryIdCache[ values[i] ] );
            }
        }'
        ));
        
        $editPrm = $navGrid->getInstanceEditFormOptions();
        $editPrm->onbeforeShowForm(new JsFunction('function(formid) {
            //alert( "formid: " + formid );
            var $input = $("input#categories", formid);
            var values = $input.val().split(",");
            $input.val("");
            jqChooser.registerUserBox( $input, "' . APPLICATION_BASE_URL . '/wzcategories/selectdialog", 
                function(searchInput) {            
                    $(searchInput).hide();
                    $("#treeSelectDialog").bind("selectTreeNode", function(event, data) {
                        jqChooser.addValue( searchInput, data.id, data.name );
                        CategoryIdCache[data.id] = data.name;
                    });
            });
            
            var chooserSearch = jqChooser.getSearchInputByOriginInput( $input );
            for(var i = 0; i < values.length; ++i) {
                if (values[i])  jqChooser.addValue(chooserSearch, values[i], CategoryIdCache[ values[i] ] );
            }
        }'
        ))->onafterclickPgButtons(new JsFunction('function(whichButton, formid, rowid) {
            //alert("#234 afterclickPgButtons");
            var $input = $("input#categories", formid);
            var values = $input.val().split(",");
            $input.val("");
            jqChooser.registerUserBox( $input, "' . APPLICATION_BASE_URL . '/wzcategories/selectdialog", 
                function(searchInput) {            
                    $(searchInput).hide();
                    $("#treeSelectDialog").bind("selectTreeNode", function(event, data) {
                        jqChooser.addValue( searchInput, data.id, data.name );
                        CategoryIdCache[data.id] = data.name;
                    });
            });
            
            var chooserSearch = jqChooser.getSearchInputByOriginInput( $input );
            for(var i = 0; i < values.length; ++i) {
                jqChooser.addValue(chooserSearch, values[i], CategoryIdCache[ values[i] ] );
            }
        }'));
        
        $colChooser = new JqGridColumnChooserOptions();
        $navGrid->addNavButton(new JqGridNavGridButton(array(
                       'id' => 'btnColCh',
                  'caption' => 'Spalten',
                    'title' => 'Spalten',
            'onclickButton' => new JsFunction('function(){'.$colChooser->renderMethod($GridId).'}')
        )));        
        
        $this->headScript()->appendScript( 
                'jQuery(function() {' 
               .(string) $JqGrid->getJsCode() 
               .'});'
        );
        
// put your code here
?>
    <span id="RsrcFilterBtnSet"><button>Filter: </button><input type="radio" id="rsrcFilterAll" name="rsrcFilter" value="all"><label for="rsrcFilterAll">Alle</label>
    <input type="radio" id="rsrcFilterInt" name="rsrcFilter" value="int"><label for="rsrcFilterInt">Interne</label>
    <input type="radio" id="rsrcFilterExt" name="rsrcFilter" value="ext"><label for="rsrcFilterExt">Externe</label>
    </span>

    <table id="gridUsrLst"></table> 
        <div id="gridUsrLst_pager"></div>
        
    <div id="DialogDispozeiten" title="Dispozeiten"></div>
    