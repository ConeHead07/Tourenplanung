<?php

// ACHTUNG fuer DateTime-Abfragen in MSSQL muss Tag und Monat vertauscht werden:
// Statt 2012-12-23 00:00:00 Muss 2012-23-12 00:00:00 (Muss man nicht verstehen, aber ist so!!!)
// SELECT COUNT(1) as count FROM BestellKoepfe 
// WHERE (AngelegtAm > DATEADD(SECOND, 0, '2012-25-12 00:00:00')) 
// OR  (GeaendertAm > DATEADD(SECOND, 0, '2012-23-02 00:00:00'))  
error_reporting(E_ALL | E_STRICT);
set_time_limit(14400);
ignore_user_abort(1);

/**
  update mr_touren_dispo_auftraege SET
  auftrag_abgeschlossen_am = now(),
  auftrag_abgeschlossen_user = 'system'
  where
  auftrag_abgeschlossen_am IS NULL
  AND Mandant = 10 AND Auftragsnummer IN(
  SELECT Auftragsnummer FROM `mr_auftragskoepfe_dispofilter`
  where Mandant = 10
  AND
  (
  GeaendertAm < '2013-02-00 00:00:00'
  OR (GeaendertAm IS NULL AND AngelegtAm < '2013-02-00 00:00:00')
  OR  Bearbeitungsstatus = 9
  )
  )
  )
 */

/**
 * Description of SystemController
 *
 * @author rybka
 */
class SystemController extends Zend_Controller_Action {

    static $text = '';
	protected $tlogFile = '';
	
	public function __construct() {
		$this->tlogFile = APPLICATION_PATH . '/log/dbimporter_' . date('YmdH') . '.log.txt';
	}
	
    public function secondsToTime($d) {
        $h = floor($d / 3600);
        $m = ($d > 59) ? (floor($d / 60) % 60) . 'm ' : '';
        $s = ($d % 60) . 's';
        return ($h ? $h . 'h ' : '') . $m . $s;
    }
	
	public function tlog($line, $log) {
		file_put_contents( $this->tlogFile, date('YmdHis #') . $line . ' ' . $log . PHP_EOL, FILE_APPEND);
		return $log;
	}
	
	public function test1Action()
	{
		self::$text.= '#' . __LINE__ . ' ' . __METHOD__ . '<br>' . PHP_EOL;
		//die($this->text);
		$this->_forward('importneueauftraege');
	}
	
	public function test2Action()
	{
		self::$text.= '#' . __LINE__ . ' ' . __METHOD__ . '<br>' . PHP_EOL;
		die(self::$text);
	}
		
	public function importmissingauftragskoepfeAction() {
		$sql = 'SELECT t.Mandant, t.Auftragsnummer FROM ' . PHP_EOL
			  .' mr_touren_dispo_vorgaenge t  ' . PHP_EOL
			  .' LEFT JOIN `mr_auftragskoepfe_dispofilter` ak ON(  ' . PHP_EOL
			  .' t.Mandant = ak.Mandant  ' . PHP_EOL
			  .' AND t.Auftragsnummer = ak.Auftragsnummer  ' . PHP_EOL
			  .' ) ' . PHP_EOL
			  .' WHERE t.IsDefault = 0 AND ak.Auftragsnummer IS NULL  ' . PHP_EOL
			  .' GROUP BY t.Mandant, t.Auftragsnummer ' . PHP_EOL
			  .' ORDER BY `t`.`Mandant`  DESC';
		die( '<pre>' . $sql . '</pre>' );
	}
	

    //put your code here
    public function updategeaendertamAction() {
        echo '#' . __LINE__ . ' ' . __METHOD__ . PHP_EOL;
        $modelTA = MyProject_Model_Database::loadModel('tourenDispoAuftraege');
//        $modelTA = new Model_TourenDispoAuftraege();
        $modelTA->importWwsGeandertAm();

        $this->_helper->viewRenderer->setNoRender(true);
        $this->_helper->layout->disableLayout();
    }
	
	public function importneueauftraegeAction()
	{
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender(true);
        die('#' . __LINE__ . ' ' . __METHOD__ . '<br/>');
        
        $lastImportTimeFile = APPLICATION_PATH . '/cache/lastTourenAuftraegeImport.log';
        
		file_put_contents($lastImportTimeFile, time());
		$modelDA = MyProject_Model_Database::loadModel('tourenDispoAuftraege');
		//$modelDA = new Model_TourenDispoAuftraege();
		$modelDA->importNeueAuftraege();
	}

    public function wwsimportAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender(true);

        $WwsImporter = new MyProject_Model_WwsFilterImport;
        echo '#' . __LINE__ . ' import Auftragskoepfe<br/>' . PHP_EOL;
        $WwsImporter->import_auftragskoepfe();
        echo '#' . __LINE__ . ' import Bestellkoepfe<br/>' . PHP_EOL;
        $WwsImporter->import_bestellkoepfe();
        echo '#' . __LINE__ . ' import Auftragspositionen<br/>' . PHP_EOL;
        $WwsImporter->import_auftragspositionen();
        echo '#' . __LINE__ . ' import Bestellpositionen<br/>' . PHP_EOL;
        $WwsImporter->import_bestellpositionen();
        ob_flush();
        die('Import abgeschlossen!');
    }
	
    function fittourdatesAction()
    {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender(true);

        /* @var $db Zend_Db_Adapter_Pdo_Mysql */
        $db = Zend_Registry::get('db');

        header('Content-Type: text/html');
        
        $sql = 'SELECT v.tour_id, v.Auftragsnummer, v.timeline_id, p.portlet_id, v.DatumVon, p.datum ' . PHP_EOL
              .' FROM `mr_touren_dispo_vorgaenge` v ' . PHP_EOL
              .' JOIN mr_touren_timelines t USING(timeline_id) ' . PHP_EOL
              .' JOIN mr_touren_portlets p ON t.portlet_id = p.portlet_id ' . PHP_EOL
              .' WHERE v.DatumVon != p.datum';
        $rows = $db->fetchAll($sql, null, Zend_Db::FETCH_OBJ);
        $stmt = $db->prepare('UPDATE mr_touren_dispo_vorgaenge Set DatumVon = :d, DatumBis = :d WHERE tour_id = :id');
        echo 'Korrigiere ' . count($rows) . ' Touren mit abweichenden Datumseintr√§gen<br>';
        echo '<table border=1 cellpadding=1 cellspacing=0><tr><td>tour-id<td>WWS-NR<td>timeline-id<td>porlet-id<td>Tour-Datum<td>Zeitschiene</tr>' . PHP_EOL;
        foreach($rows as $r) {
            echo '<tr><td>';
            echo implode('</td><td>', array(
                $r->tour_id, 
                $r->Auftragsnummer, 
                $r->timeline_id, 
                $r->portlet_id, 
                $r->DatumVon, 
                $r->datum));
            echo '</tr>' . PHP_EOL;
            $stmt->execute(array('d' => $r->datum, 'id' => $r->tour_id));            
        }
        echo '</table>';        
    }

    public function wwscount() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender(true);

        $tables = array(
            'wws_auftragskoepfe', 'wws_auftragspositionen',
            'wws_bestellkoepfe', 'wws_bestellpositionen',
            'wws_stg_auftragskoepfe', 'wws_stg_auftragspositionen',
            'wws_stg_bestellkoepfe', 'wws_stg_bestellpositionen',
        );
        /* @var $db Zend_Db_Adapter_Pdo_Mysql */
        $db = Zend_Registry::get('db');

        header('Content-Type: text/plain');
        foreach ($tables as $table) {
            echo $table . ' : ' . $db->fetchOne('SELECT COUNT(1) FROM ' . $table) . PHP_EOL;
        }
    }

    public function wwscleanlog($props, $msg, $reset = 0) {
        $logdir = APPLICATION_PATH . '/log/wwsimport/';
        if (!$reset)
            file_put_contents($logdir . $props['log'], date('Ymd His ') . $msg . PHP_EOL, FILE_APPEND);
        else
            file_put_contents($logdir . $props['log'], date('Ymd His ') . $msg . PHP_EOL);
    }

    public function wwscleanAction() 
    {
		$rq = $this->getRequest();
		$v = $rq->getParam('verbose', 0);
		$anr = $rq->getParam('anr', '');
		$mnd = $rq->getParam('mnd', '10');
        /* @var $db Zend_Db_Adapter_Pdo_Mysql */
        $db = Zend_Registry::get('db');
        $db->setFetchMode(Zend_Db::FETCH_NUM);

        $wwsdb = Zend_Registry::get('sqlsrvdb');
        $wwsdb->setFetchMode(Sqlsrv::FETCH_ASSOC);

        $stgTDA = new Model_Db_TourenDispoAuftraege;

        $sql = 'SELECT Mandant, Auftragsnummer FROM ' . $stgTDA->info(Zend_Db_Table::NAME)
                . ' WHERE '
				. (!$anr 
				     ? ' auftrag_abgeschlossen_am IS NULL AND Mandant < 100'
					 : ' Auftragsnummer = ' . (int)$anr . ' AND Mandant =  ' . (int)$mnd
				  )
                . ' ORDER BY Mandant';
				
        $lastM = 0;
        $query = '';
        $isFirstAnr = 0;
        $stmt = $db->query($sql);
        $a = 0;

        if ($v) {
			echo '<pre>' . PHP_EOL;
			echo '#' . __LINE__ . ' SQL GET Auftragsnummern: ' . PHP_EOL . $sql . PHP_EOL;
		}

        while ($row = $stmt->fetch(Zend_Db::FETCH_NUM)) {
            ++$a;
            if ($row[0] != $lastM) {
                if ($lastM)
                    $query.= '))' . PHP_EOL;
                $query.= ($query ? ' OR ' : '') . '(t.Mandant = ' . $row[0] . ' AND (' . PHP_EOL;
                $isFirstAnr = true;
            }
            $query.= '   ' . ($isFirstAnr ? '' : 'OR ') . 't.Auftragsnummer = ' . $row[1] . PHP_EOL;
            if ($isFirstAnr)
                $isFirstAnr = false;
            $lastM = $row[0];
        }
        if ($query)
            $query.= '))' . PHP_EOL;

        $stgAK = MyProject_Model_Database::getStorageByClass('vorgaenge');
        $stgAP = MyProject_Model_Database::getStorageByClass('auftragspositionen');
        $stgBK = MyProject_Model_Database::getStorageByClass('bestellkoepfe');
        $stgBP = MyProject_Model_Database::getStorageByClass('bestellpositionen');
        $stgWB = MyProject_Model_Database::getStorageByClass('Warenbewegungen');

        $wwsTableKeys = array(
        'AuftragsKoepfe' => array(
            'keys' => array('Mandant', 'Auftragsnummer'),
            'stg' => 'mr_wws_ak_keys',
            'dst' => $stgAK->info(Zend_Db_Table::NAME),
            'dep' => array('mr_touren_dispo_auftraege', 'mr_auftragskoepfe_refs'),
            'log' => 'CleanAuftragskoepfe.log'),
        'AuftragsPositionen' => array(
            'keys' => array('Mandant', 'Auftragsnummer', 'Positionsnummer'),
            'stg' => 'mr_wws_ap_keys',
            'dst' => $stgAP->info(Zend_Db_Table::NAME),
            'dep' => array('mr_touren_dispo_auftragspositionen'), //'mr_touren_dispo_auftragspositionen_txt'),
            'log' => 'CleanAuftragspositionen.log'),
        'BestellKoepfe' => array(
            'keys' => array('Mandant', 'Bestellnummer'),
            'stg' => 'mr_wws_bk_keys',
            'dst' => $stgBK->info(Zend_Db_Table::NAME),
            'dep' => array('mr_bestellkoepfe'),
            'log' => 'CleanBestellkoepfe.log'),
        'BestellPositionen' => array(
            'keys' => array('Mandant', 'Bestellnummer', 'Positionsnummer'),
            'stg' => 'mr_wws_bp_keys',
            'dst' => $stgBP->info(Zend_Db_Table::NAME),
            'dep' => array('mr_bestellpositionen_dispofilter'),
            'log' => 'CleanBestellpositionen.log'),
        'Warenbewegungen' => array(
            'keys' => array('Mandant', 'LaufendeNummer'),
            'stg' => 'mr_wws_wb_keys',
            'dst' => $stgWB->info(Zend_Db_Table::NAME),
            'dep' => array(),
            'log' => 'CleanWarenbewegungen.log'),
        );
        foreach ($wwsTableKeys as $props) {
            $this->wwscleanlog($props, 'Start', 1);
        }

        $this->wwscleanlog($wwsTableKeys['AuftragsKoepfe'], 'Nicht abgeschlossene Vorgaenge: ' . $a);

        foreach ($wwsTableKeys as $wwsTbl => $props) {
            $db->query('TRUNCATE ' . $props['stg']);
            $sql = 'SELECT ' . implode(',', $props['keys']) . ' FROM ' . $wwsTbl . ' t WHERE ' . $query;
            if ($v) echo ' SQL Get ' . $wwsTbl . ': ' . $sql . PHP_EOL;
			// die('#'.__LINE__ . ' sql(anr:' . $anr . '): ' . $sql);
            $this->wwscleanlog($props, 'starting wwsQueries: ' . $wwsTbl);
            try {
                $stmt = $wwsdb->query($sql);
            } catch (Exception $e) {
                $this->wwscleanlog($props, ' ERROR: ' . $e->getMessage() . PHP_EOL . $sql);
                exit;
            }

            $blockInsert = 'INSERT INTO ' . $props['stg'] . '(' . implode(',', $props['keys']) . ')' . PHP_EOL . ' VALUES ' . PHP_EOL;
            $blockValues = '';
            $i = 0;
            while (($row = $stmt->fetch(Sqlsrv::FETCH_NUM)) && ++$i) {
                //die('row ' . print_r($row,1));
                $blockValues.= ($blockValues ? ',' . PHP_EOL : '') . '(' . implode(',', $row) . ')';
                if ($i && $i % 3000 == 0) {
                    try {
                        $db->query($blockInsert . $blockValues);
                    } catch (Exception $e) {
                        $this->wwscleanlog($props, ' ERROR: ' . $e->getMessage() . PHP_EOL . $sql);
                        exit;
                    }
                    $this->wwscleanlog($props, 'Inserted ' . $i . ' Keys of ' . $wwsTbl);
                    $blockValues = '';
                }
            }
            if ($blockValues) {
                $db->query($blockInsert . $blockValues);
				if ($v) echo '#' . __LINE__ . ' SQL Insert ' . $wwsTbl . ': ' . PHP_EOL . $blockInsert . $blockValues . PHP_EOL;
                $this->wwscleanlog($props, 'Inserted ' . $i . ' Keys of ' . $wwsTbl);
            }
        }

        foreach ($wwsTableKeys as $wwsTbl => $props) {
            $this->wwscleanlog($props, $wwsTbl . ' Search For Del-Keys');
            $sql = 'SELECT t.' . trim(implode(', t.', $props['keys'])) . ' ' . PHP_EOL
                    . 'FROM ' . $props['dst'] . ' t ' . PHP_EOL
                    . 'LEFT JOIN ' . $props['stg'] . ' s USING(' . implode(', ', $props['keys']) . ')' . PHP_EOL
                    . 'WHERE (' . $query . ') AND s.Mandant IS NULL';

            try {
                if ($v) echo '#' . __LINE__ . ' SQL Get Del Keys ' . $wwsTbl . ': ' . PHP_EOL . $sql . PHP_EOL;
				$stmt = $db->query($sql);
            } catch (Exception $e) {
                if ($v) echo '#' . __LINE__ . ' SQL ERROR ' . $wwsTbl . ': ' . PHP_EOL . $e->getMessage() . PHP_EOL;
				$this->wwscleanlog($props, ' ERROR: ' . $e->getMessage() . PHP_EOL . $sql);
                exit;
            }

            $d = 0;
            $where = '';
            while ($row = $stmt->fetch()) {
                ++$d;
                if ($d > 1)
                    $where.= ' OR ';
                foreach ($props['keys'] as $i => $k)
                    $where.=($i ? ' AND ' : '(') . $k . '=' . $row[$i];
                $where.= ')' . PHP_EOL;
            }
            $this->wwscleanlog($props, 'found ' . $d . ' ' . $wwsTbl . ' did no more exist in WWS!');
            //echo $where . PHP_EOL;
            if (0 === $d)
                continue;

            foreach (array_merge(array($props['dst']), $props['dep']) as $delTbl) {
                try {
//                  $sql = 'SELECT count(1) FROM ' . $delTbl . ' WHERE ' . $where;
//                  $affectingRows = $db->fetchOne($sql);
                    $sql = 'DELETE FROM ' . $delTbl . ' WHERE ' . $where;
					if ($v) echo '#' . __LINE__ . ' SQL Delete no more existing Keys from ' . $delTbl . ': ' . PHP_EOL . $sql . PHP_EOL;
                    $stmt = $db->query($sql);
                    $affectedRows = $stmt->rowCount();
                } catch (Exception $e) {
                     if ($v) echo '#' . __LINE__ . ' SQL ERROR : ' . PHP_EOL . $e->getMessage() . PHP_EOL;
					 $this->wwscleanlog($props, ' ERROR: ' . $e->getMessage() . PHP_EOL . $sql);
                    exit;
                }
                $this->wwscleanlog($props, 'Deleted Rows in ' . $delTbl . ' : ' . $affectedRows);
            }
        }
        die('finished successful!');
    }

    public function wwsdirektimportAction() {
		set_time_limit(14400);
		ignore_user_abort(1);
		
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender(true);

        $logdir = APPLICATION_PATH . '/log/wwsimport/';
        $timeIn = time();
        /* @var $db Zend_Db_Adapter_Pdo_Mysql */
        $db = Zend_Registry::get('db');

        $wwstable = $this->getRequest()->getParam('table', '');
        $reset = $this->getRequest()->getParam('reset', '');
        $dateOffset = $this->getRequest()->getParam('date', '');
		if (0 && !$dateOffset) {
				echo 'Aktuell laufen General-Updates. In dieser Zeit werden keine weiteren Jobs angenommen!';
				return;
		}

        /* @var $wwsdb MyProject_Db_Sqlsrv */
        $wwsdb = Zend_Registry::get('sqlsrvdb');
        $wwsdb->setFetchMode(Sqlsrv::FETCH_ASSOC);

        if ($fillWssTables = 0) {
            $stgAK = MyProject_Model_Database::getStorageByClass('wwsVorgaenge');
            $stgAP = MyProject_Model_Database::getStorageByClass('wwsAuftragspositionen');
            $stgBK = MyProject_Model_Database::getStorageByClass('wwsBestellkoepfe');
            $stgBP = MyProject_Model_Database::getStorageByClass('wwsBestellpositionen');
            $stgWB = MyProject_Model_Database::getStorageByClass('wwsWarenbewegungen');
        } else {
            $stgAK = MyProject_Model_Database::getStorageByClass('vorgaenge');
            $stgAP = MyProject_Model_Database::getStorageByClass('auftragspositionen');
            $stgBK = MyProject_Model_Database::getStorageByClass('bestellkoepfe');
            $stgBP = MyProject_Model_Database::getStorageByClass('bestellpositionen');
            $stgWB = MyProject_Model_Database::getStorageByClass('warenbewegungen');
        }
        $wwsTablesToDispoModels = array(
            'AuftragsKoepfe' => $stgAK,
            'AuftragsPositionen' => $stgAP,
            'BestellKoepfe' => $stgBK,
            'BestellPositionen' => $stgBP,
            'Warenbewegungen' => $stgWB,
        );
        $wwsTablesReset = array(
            'AuftragsKoepfe' => 'DELETE FROM '. $stgAK->info(Zend_Db_Table::NAME) . ' WHERE Mandant > 110',
        );
		//if ($wwstable === 'Warenbewegungen) $wwsTablesToDispoModels['Warenbewegungen'] = $stgWB;
		
        $wwsImportFilter = array();

        if ($wwstable) {
            $checkWwsTables = explode(',', $wwstable);

            foreach ($wwsTablesToDispoModels as $k => $v) {
                //die('#'.__LINE__. ' ' . $k . ' in array('.print_r($checkWwsTables,1) . (int)in_array($k, $checkWwsTables ));
                if (in_array($k, $checkWwsTables))
                    $wwsImportFilter[$k] = $v;
            }
            unset($checkWwsTables);
            //die('#'.__LINE__ . print_r($wwsImportFilter,1) );
        } else {
            $wwsImportFilter = $wwsTablesToDispoModels;
        }

        if (!is_dir($logdir)) {
            mkdir($logdir);
        }

        header('Content-Type: text/plain');

        $row = null;
        try {
            /* @var $stg Zend_Db_Table_Abstract */
            foreach ($wwsImportFilter as $table => $stg) {
                $primaries = $stg->info(Zend_Db_Table::PRIMARY);
				
                $logfile = $logdir . $table . '.log';
                $cols = implode(',', array_slice($stg->info(Zend_Db_Table::COLS), 0, -1));
//                die(print_r($cols,1));
                if ($reset) {
                    file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' start import with table reset' . PHP_EOL);
                    if (empty($wwsTablesReset[$table])) {
                        $db->query( $this->tlog(__LINE__, 'TRUNCATE ' . $stg->info(Zend_Db_Table::NAME)) );
                    } else {
                        $db->query( $this->tlog(__LINE__, $wwsTablesReset[$table]));
                    }
					$this->tlog( __LINE__, 'Error: ' . print_r($db->error(),1) );
                    $where = '';
                } else {
                    file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . 's start import update');
                    if (!$dateOffset) {
						$maxDates = $db->fetchRow($this->tlog(__LINE__,'SELECT MAX(AngelegtAm) MaxAngelegtAm, MAX(GeaendertAm) MaxGeaendertAm FROM ' . $stg->info(Zend_Db_Table::NAME)));
						$lastMod = ($maxDates['MaxGeaendertAm'] > $maxDates['MaxAngelegtAm']) ? $maxDates['MaxGeaendertAm'] : $maxDates['MaxAngelegtAm'];
					} else {
						$lastMod = $dateOffset;
					}
                    //echo $lastMod . PHP_EOL;
                    if ($lastMod)
                        $lastMod = preg_replace('#(\d{4})-(\d{2})-(\d{2})(.*)#', "$1-$3-$2$4", $lastMod);
                    //die($lastMod);
                    else
                        $lastMod = '1800-01-01 00:00:00';
						
					$where = ' WHERE ((AngelegtAm IS NOT NULL AND AngelegtAm > DATEADD(SECOND, 0, \'' . $lastMod . '\')) '
						. ' OR (GeaendertAm IS NOT NULL AND GeaendertAm > DATEADD(SECOND, 0, \'' . $lastMod . '\'))) ';
					
                    if ('AuftragsKoepfe' === $table) {
                        $where.= ' AND (Versandbedingung NOT LIKE \'Nicht ins Dispotool\' AND Geschaeftsbereich NOT LIKE \'Neuss Medientechnik\')';
                    }
                }


                $sql = $this->tlog( __LINE__, 'SELECT COUNT(1) AS count FROM ' . $table . $where . '');
                try {
                    $total = $wwsdb->fetchOne($sql);
                } catch (Exception $e) {
                    echo $e->getMessage() . PHP_EOL;
                    echo $sql . PHP_EOL;
                    file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' ERROR ' . PHP_EOL . $e->getMessage() . PHP_EOL . ' sql ' . $sql . PHP_EOL, FILE_APPEND);
                    $this->tlog( __LINE__, 'Error: ' . $e->getMessage());
					exit;
                }
                file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' sql ' . $sql . ' => ' . $total . PHP_EOL, FILE_APPEND);
                $curr = 0;
                $saved = 0;

                $sql = $this->tlog(__LINE__, 'SELECT ' . $cols . ' FROM ' . $table . $where . ' ORDER BY ISNULL(GeaendertAm, AngelegtAm)');
                file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' sql ' . $sql . PHP_EOL, FILE_APPEND);
                
				try {
					/* @var $stmt Sqlsrv_Stmt */
					$stmt = $wwsdb->query($sql);
				} catch (Exception $e) {
					$this->tlog( __LINE__, 'Error: ' . $e->getMessage());
					exit;
                }
                while ($row = $stmt->fetch(Sqlsrv::FETCH_ASSOC)) {
                    ++$curr;
                    //if ($curr > 200) break;

                    foreach ($row as $k => $v) {
                        if ($v instanceof DateTime)
                            $row[$k] = $v->format('Y-m-d H:i:s');
                    }
                    $record = $stg->createRow();
                    $record->setFromArray($row);
                    
                    try {
                        $where = array();
                        foreach($primaries as $_prim) {
                            $where[] = $db->quoteInto("$_prim = ?", $row[$_prim] );
                        }
						$this->tlog(__LINE__, 'update: ' . print_r(array('row'=>$row, 'where'=>$where),1));
                        if (!$stg->update($row, $where)) $record->save();
                        
                        ++$saved;
                        if ($saved % 1000 == 0)
                            file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' running Es wurden ' . $saved . ' von ' . $total . ' ' . $table . ' eingefuegt!' . PHP_EOL, FILE_APPEND);
                    } catch (Zend_Db_Statement_Exception $e) {
                        $err = stripos($e->getMessage(), 'duplicate') ? ' Duplicate Entry' : $e->getMessage();
                        file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' error (' . $saved . ' / ' . $total . ') ' . $err . PHP_EOL, FILE_APPEND);
                        echo $this->tlog('', '#' . __LINE__ . ' Zend_Db_Statement_Exception (code:' . $e->getCode() . ') ') . PHP_EOL; // . $e->getMessage() . PHP_EOL;
                    } catch (Zend_Db_Exception $e) {
                        echo $this->tlog('', '#' . __LINE__ . ' Zend_Db_Exception (code:' . $e->getCode() . ') ' . $e->getMessage()) . PHP_EOL;
                    } catch (Zend_Exception $e) {
                        echo $this->tlog('', '#' . __LINE__ . ' Zend_Exception ' . $e->getMessage()) . PHP_EOL;
                    } catch (Exception $e) {
                        echo $this->tlog('', '#' . __LINE__ . ' Exception ' . $e->getMessage()) . PHP_EOL;
                    }
                    //break;
                }
                file_put_contents($logfile, date('YmdHis') . ' ' . $this->secondsToTime(time() - $timeIn) . ' finished Es wurden ' . $saved . ' von ' . $total . ' ' . $table . ' eingefuegt!' . PHP_EOL, FILE_APPEND);
                echo $this->tlog(__LINE__, 'Es wurden ' . $saved . ' von ' . $total . ' ' . $table . ' eingefuegt!') . PHP_EOL;

                echo 'logs:' . PHP_EOL . readfile($logfile);
                flush();
            }
        } catch (Exception $e) {
            echo $this->tlog(__LINE__, $e->getMessage()) . PHP_EOL;
            echo $this->tlog(__LINE__, $e->getTraceAsString()) . PHP_EOL;
            echo $this->tlog(__LINE__, 'last-row: ' . print_r($row, 1)) . PHP_EOL;
        }
		
		$this->_forward('importneueauftraege');
		die($this->tlog(__LINE__, 'finished successfully!'));
    }
}
